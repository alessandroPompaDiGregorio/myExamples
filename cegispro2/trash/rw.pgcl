nat x;
nat first_it [0,1];
# nat r;
nat coeff;
nat posZ [0,1];
nat posZ1 [0,1];
nat y;
nat y1;
nat i;

while(y<1) {
	x:=1;	
	if(first_it=0) {
		first_it:=1;
		coeff:=unif(0,100);
#		r:= 0 + coeff*(1/100);
	} else {
		y1:=y;
		posZ1:=posZ;
	}
	# 12 uniforms to approximate a standard normal
	coeff:=unif(0,100);
	y:= 0 + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	coeff:=unif(0,100);
	y:= y + coeff*(1/100);
	# centering
	if (6 < y) {
		posZ:=1;
		y:= y - 6;
	} else {
		posZ:=0;
		y:= 6 - y;
	} 	
# 	adjusting for N(y,2*r)
	if(posZ1=0 & posZ=0) {
		y := (y*2)*0.5 + y1; # Because of these instructions r can't be a variable
	} else {
		if(posZ1=1 & posZ=1) {
			y := (y*2)*0.5 + y1;
		} else {
			if (0 <= (2*0.5)*y - y1) {
				y := (y*2)*0.5 - y1;
			} else {
				y := y1 -0.5*(y*2);
			}
		}
	}
	i:=i+1;
}
